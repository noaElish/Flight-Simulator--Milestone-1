Interperter.cpp

intoCommandMap-

/*
print the map
for(auto it = commandMap.begin(); it != commandMap.end(); ++it)
{
    cout << "key:  " << it->first<<endl;
    cout << "value:  " << it->second<<endl;
}
 */
parser
/*
else if (symbolsMaps->symbolTable.count(splittedStrings[i])!=0){
    // variable = num/ex1
    //symbolsMaps->symbolTable.find(splittedStrings[i])->second.updateValue(stoi(splittedStrings[i+2]));
    c = new DefineVarCommand();
    indexJump = c->execute(splittedStrings, i);
    i=i+indexJump-1;
    //i change the value in Variable. need to change also in simulator -> or <-
    /***********************************************
}
*/
diffrent

/*
Variable *Variable::getInstance(){
    int value = 1;
    string sim = " ";
    static Variable varInstance(value, sim);
    return &varInstance;
}

putInSimMap

/*
cout<<"string: "<<simString<<endl;
cout<<"float: "<<num<<endl;
 */































command.cpp

DefineVarCommand::execute

 /*
 float value = 3;
 string sim = "p";
 string direction = "o";
 SymbolTable *symbolsMaps = symbolsMaps->getInstance();
 Variable variable = new Variable(value,sim, direction);
// v= new Variable(3, "h", "o");
 string d= "hh";
 //symbolsMaps->symbolTable.insert(d, var);
 symbolsMaps->putInSymbolTable(d,variable);
 */
///////////////////
/*if (arrayStr[index + 1].compare("=") == 0) {
  return 2;
} else if ((arrayStr[index + 1].compare("while")) || (arrayStr[index + 1].compare("for")) ||
    (arrayStr[index + 1].compare("if"))) {
  return 1;
} else if ((arrayStr[index + 2].compare("sim") == 0)) {
  return 5;
} else {
  return 0;
}*/


















































